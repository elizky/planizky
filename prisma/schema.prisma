datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}

enum TrainingType {
  SERIES
  CIRCUIT
  COMBINED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(user)
  accounts      Account[]
  plans         Plan[]
  comments      Comment[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ExerciseStats    ExerciseStats[]
  TrainingDayStats TrainingDayStats[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Plan {
  id           String        @id @default(cuid())
  userId       String
  title        String
  description  String?
  isActive     Boolean       @default(true)
  startDate    DateTime
  endDate      DateTime?
  trainingDays TrainingDay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model TrainingDay {
  id                  String            @id @default(cuid())
  planId              String
  title               String
  description         String?
  type                TrainingType // Nuevo: Tipo de entrenamiento
  settings            Json? // Nuevo: Configuraciones específicas para circuito o combinado
  completedCount      Int               @default(0)
  completionTimes     Int[]
  completionDurations Int[]
  exercises           Exercise[]
  comments            Comment[]
  stats               TrainingDayStats? // Nueva relación con TrainingDayStats

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan Plan @relation(fields: [planId], references: [id])
}

model Exercise {
  id                String         @id @default(cuid())
  trainingDayId     String
  catalogId         String?
  customTitle       String? // Permitir personalización del título
  customDescription String? // Permitir personalización de la descripción
  videoUrl          String? // Campo opcional para videos personalizados
  sets              Set[]
  comments          Comment[]
  stats             ExerciseStats? // Nueva relación con ExerciseStats

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainingDay TrainingDay      @relation(fields: [trainingDayId], references: [id])
  catalog     ExerciseCatalog? @relation(fields: [catalogId], references: [id])
}

model ExerciseCatalog {
  id               String   @id @default(cuid())
  title            String
  englishTitle     String?
  description      String?
  videoUrl         String?
  muscleGroup      String
  difficulty       String
  equipment        String[]
  primaryMuscles   String[]
  secondaryMuscles String[]
  tips             String[]
  safetyWarnings   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId        String?
  category          Category?  @relation(fields: [categoryId], references: [id])
  trainingExercises Exercise[]
}

model Category {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String?
  focusAreas     String[]
  recommendedFor String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercises ExerciseCatalog[]
}

model Set {
  id          String @id @default(cuid())
  exerciseId  String
  repetitions Int
  weight      Float?
  duration    Int? // Duración en segundos para ejercicios con tiempo
  restTime    Int? // Tiempo de descanso en segundos

  history SetHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercise Exercise @relation(fields: [exerciseId], references: [id])
}

model SetHistory {
  id           String   @id @default(cuid())
  setId        String
  repetitions  Int?
  weight       Float?
  duration     Int? // Duración en segundos para ejercicios con tiempo
  restTime     Int? // Tiempo de descanso en segundos
  changeReason String? // Razón del cambio (opcional)
  createdAt    DateTime @default(now())

  set Set @relation(fields: [setId], references: [id])
}

model Comment {
  id            String  @id @default(cuid())
  content       String
  userId        String
  exerciseId    String?
  trainingDayId String? // Nuevo: Comentarios asociados a un día de entrenamiento

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  exercise    Exercise?    @relation(fields: [exerciseId], references: [id])
  trainingDay TrainingDay? @relation(fields: [trainingDayId], references: [id])
}

// Modelo de estadísticas de ejercicios
model ExerciseStats {
  id           String   @id @default(cuid())
  exerciseId   String   @unique
  userId       String
  frequency    Int      @default(0) // Número de veces que se ha realizado el ejercicio
  maxReps      Int? // Máxima cantidad de repeticiones realizadas en una sesión
  maxWeight    Float? // Máximo peso levantado en una sesión
  avgReps      Int? // Promedio de repeticiones por sesión
  avgWeight    Float? // Promedio de peso levantado por sesión
  bestDuration Int? // Mejor duración en segundos (si aplica)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  exercise Exercise @relation(fields: [exerciseId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

// Modelo de estadísticas de día de entrenamiento
model TrainingDayStats {
  id             String   @id @default(cuid())
  trainingDayId  String   @unique
  userId         String
  completedCount Int      @default(0) // Número de ejercicios completados en el día
  totalDuration  Int      @default(0) // Duración total en segundos del entrenamiento
  averageWeight  Float? // Promedio de peso levantado en todos los ejercicios
  averageReps    Int? // Promedio de repeticiones por ejercicio
  exercisesCount Int // Número total de ejercicios realizados en el día
  completedAt    DateTime @default(now())
  updatedAt      DateTime @updatedAt

  trainingDay TrainingDay @relation(fields: [trainingDayId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}
