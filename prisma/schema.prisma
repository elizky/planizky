datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role       @default(user)
  accounts      Account[]
  plans         Plan[]
  progress      Progress[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model TrainingDay {
  id                  String     @id @default(cuid())
  planId              String
  title               String
  type                String
  description         String?
  completedCount      Int        @default(0)
  completionTimes     Int[]
  completionDurations Int[] // stores durations in seconds
  date                DateTime[]
  exercises           Exercise[]
  comments            Comment[]
  progress            Progress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan Plan @relation(fields: [planId], references: [id])
}

model Exercise {
  id            String    @id @default(cuid())
  trainingDayId String?
  title         String
  description   String?
  category      String
  muscleGroup   String
  sets          Set[]
  comments      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainingDay TrainingDay? @relation(fields: [trainingDayId], references: [id])
}

model Set {
  id          String @id @default(cuid())
  exerciseId  String
  repetitions Int
  weight      Float?
  duration    Int? // duration in seconds
  restTime    Int? // rest time in seconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercise Exercise @relation(fields: [exerciseId], references: [id])
}

model Progress {
  id            String   @id @default(cuid())
  userId        String
  trainingDayId String?
  date          DateTime
  weight        Float?
  notes         String?
  stats         Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  trainingDay TrainingDay? @relation(fields: [trainingDayId], references: [id])
}

model Comment {
  id            String  @id @default(cuid())
  content       String
  userId        String
  exerciseId    String?
  trainingDayId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  exercise    Exercise?    @relation(fields: [exerciseId], references: [id])
  trainingDay TrainingDay? @relation(fields: [trainingDayId], references: [id])
}

model Plan {
  id           String        @id @default(cuid())
  userId       String
  title        String
  description  String?
  isActive     Boolean       @default(false)
  startDate    DateTime
  endDate      DateTime?
  trainingDays TrainingDay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
